#! /Library/Frameworks/Python.framework/Versions/Current/bin/python

import os
# import subprocess
try:
    input = raw_input
except:
    pass


PATH = os.environ['PATH']
paths = PATH.split(':')
ppaths = tuple(filter(lambda x: 'python' in x.lower(), paths))
if len(ppaths) == 1:
    symlink_path = os.path.dirname(ppaths[0])
elif len(ppaths) == 0:
    raise Exception("no symlink for python in PATH: %r" % PATH)
else:
    raise Exception("several python in path: %s" % str(ppaths))

# symlink_tgt_root = os.path.dirname(symlink_tgt)
std_exception_msg = ("This script can most likely not be used on that "
                     "platform. It was written for Mac OS X, with python.org"
                     " and EPD installations.")
if not os.path.exists(symlink_path):
    raise Exception("the default symlink location not exist (%r). %s"
                    % (symlink_path, std_exception_msg))
if not os.path.islink(symlink_path):
    raise Exception("the default symlink path is not a symlink (%r). %s"
                    % (symlink_path, std_exception_msg))


def is_py_dir(directory):
    ispy = (os.path.isdir(directory)
            and not os.path.islink(directory)
            and os.path.exists(os.path.join(directory, 'bin')))
    return ispy

py_paths = {}

base = '/Library/Frameworks/Python.framework/Versions'
for name in os.listdir(base):
    full = os.path.join(base, name)
    if is_py_dir(full):
        if name.startswith('7'):
            name = "EPD-" + name
        py_paths[name] = full

base = '/Library/Frameworks/EPD64.framework/Versions'
for name in os.listdir(base):
    full = os.path.join(base, name)
    if is_py_dir(full):
        py_paths["EPD-64-" + name] = full


def get_options():
    # find the currently active version
    current_path = os.readlink(symlink_path)
    current_found = False
    labels = sorted(py_paths)
    for i, label in enumerate(labels):
        path = py_paths[label]
        if path == current_path:
            prefix = '->%i  '
            current_found = True
        else:
            prefix = '  %i  '
        print('%s%s:  %r' % (prefix % i, label, path))

    if not current_found:
        print('current:  %r' % (current_path))

    return labels


def switchpy(version):
    current = os.readlink(symlink_path)
    if version in py_paths:
        new_dest = py_paths[version]
        if new_dest == current:
            print("%r is already selected" % version)
        else:
#            p = os.system('echo %s|sudo -S %s' % (mypass, sudo_command))
#            cmd = 'ln -sfh %s %s' % (new_dest, symlink_path)
#            p = os.system('echo %s|sudo -S %s' % (mypass, cmd))

#            returncode = subprocess.call(["/usr/bin/sudo", cmd])

            print("removing old symlink")
            os.remove(symlink_path)
            print("creating new symlink")
            os.symlink(new_dest, symlink_path)
        return True
    elif version:
        print("Invalid label: %r" % version)
        return False





if __name__ == '__main__':
    available = get_options()
    inp = input('select version: ')
    if inp == '':
        pass
    else:
        try:
            version = available[int(inp)]
        except:
            print("invalid input: %r; int required" % inp)
        else:
            switchpy(version)
